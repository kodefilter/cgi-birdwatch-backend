{"version":3,"sources":["services/observations.js","components/notification.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","getAll","a","request","axios","get","response","data","create","newObject","post","deleteEntry","id","delete","Notification","errorMessage","successMessage","className","Styles","styled","div","Table","columns","useTable","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","firstPageRows","slice","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","i","getRowProps","cells","cell","getCellProps","length","App","useState","observations","setObservations","newName","setNewName","newRarity","setNewRarity","newNotes","setNewNotes","setErrorMessage","setSuccessMessage","useEffect","observationService","then","initialObservations","React","useMemo","Header","accessor","str","Cell","tableProps","style","cursor","color","textDecoration","onClick","original","toBeDeletedObservation","find","observation","window","confirm","name","deletedObservation","filter","setTimeout","catch","error","p","class","onSubmit","event","preventDefault","observationObject","rarity","notes","timestamp","Date","addedObservation","concat","value","onChange","target","cols","type","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6f288bf8.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = \"https://pure-atoll-07080.herokuapp.com/api/observations\"\n\nconst getAll = async () => {\n    const request =  axios.get(baseUrl)\n    const response = await request\n    return response.data\n}\n\nconst create = async newObject => {\n    const request = axios.post(baseUrl, newObject)\n    const response = await request\n    return response.data  \n}\n\nconst deleteEntry = async (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    const response = await request\n    return response.data\n}\n\n\nexport default { getAll, create, deleteEntry }","import React from \"react\"\n\n//notification component\nconst Notification = ({ errorMessage, successMessage }) => {\n    if (errorMessage === null && successMessage === null) {\n      return null \n    }\n    return errorMessage ? <div className=\"error\">{errorMessage}</div> : <div className=\"success\">{successMessage}</div>\n  }\n\nexport default Notification","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { useTable, useSortBy } from \"react-table\";\nimport observationService from \"./services/observations\";\nimport Notification from './components/notification'\nimport \"./App.css\";\n\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`;\n\nfunction Table({ columns, data }) {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable(\n    {\n      columns,\n      data\n    },\n    useSortBy\n  );\n\n  // We don't want to render all 2000 rows for this example, so cap\n  // it at 20 for this use case\n  const firstPageRows = rows.slice(0, 20);\n\n  return (\n    <>\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                // Add the sorting props to control sorting. For this example\n                // we can add them into the header props\n                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                  {column.render(\"Header\")}\n                  {/* Add a sort direction indicator */}\n                  <span>\n                    {column.isSorted\n                      ? column.isSortedDesc\n                        ? \" ðŸ”½\"\n                        : \" ðŸ”¼\"\n                      : \"\"}\n                  </span>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {firstPageRows.map((row, i) => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      <br />\n      <div>Showing the first 20 results of {rows.length} rows</div>\n    </>\n  );\n}\n\nconst App = () => {\n  const [observations, setObservations] = useState([{}]);\n  const [newName, setNewName] = useState(\"\");\n  const [newRarity, setNewRarity] = useState(\"common\");\n  const [newNotes, setNewNotes] = useState(\"\");\n\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [successMessage, setSuccessMessage] = useState(null)\n\n  useEffect(() => {\n    observationService.getAll().then(initialObservations => {\n      setObservations(initialObservations);\n    });\n  }, []);\n\n  const addObservation = event => {\n    event.preventDefault();\n\n    const observationObject = {\n      name: newName,\n      rarity: newRarity,\n      notes: newNotes,\n      timestamp: new Date()\n    };\n\n    observationService\n      .create(observationObject)\n      .then(addedObservation => {\n        setObservations(observations.concat(addedObservation));\n        setNewName(\"\");\n        setNewNotes(\"\");\n\n        setSuccessMessage(`${addedObservation.name} has been added`)\n        setTimeout(()=>{\n          setSuccessMessage(null)\n        },3000)\n\n      })\n      .catch(error => {\n        setNewName(\"\");\n        setNewNotes(\"\");\n        setErrorMessage(error.response.data.error)\n        setTimeout(()=>{\n          setSuccessMessage(null)\n        },3000)\n\n      });\n\n  };\n\n \n\n  const handleNameChange = event => {\n    setNewName(event.target.value);\n  };\n\n  const handleRarityChange = event => {\n    setNewRarity(event.target.value);\n  };\n\n  const handleNotesChange = event => {\n    setNewNotes(event.target.value);\n  };\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: \"Name\",\n        accessor: \"name\"\n      },\n      {\n        Header: \"Rarity\",\n        accessor: \"rarity\"\n      },\n      {\n        Header: \"Notes\",\n        accessor: \"notes\"\n      },\n      {\n        Header: \"Date\",\n        accessor: \"timestamp\"\n      },\n      {\n        Header: 'Delete',\n        id: 'delete',\n        accessor: (str) => 'delete',\n\n    Cell: (tableProps) => (\n      <span style={{cursor:'pointer',color:'blue',textDecoration:'underline'}}\n        onClick={() => {\n\n          // id of the object in table\n          const id = tableProps.row.original.id\n\n          const toBeDeletedObservation = observations.find(observation=>observation.id === id)\n\n    if (window.confirm(`Delete ${toBeDeletedObservation.name}`)) {\n      observationService\n          .deleteEntry(id)\n          .then( deletedObservation => {\n            setObservations(observations.filter(observation => observation.id !== deletedObservation.id ))\n            setSuccessMessage(`${toBeDeletedObservation.name} was deleted from the server`)\n            setTimeout(()=>{\n              setSuccessMessage(null)\n            }, 5000)\n\n          }).catch(error => {\n            \n            setErrorMessage(`the observation '${toBeDeletedObservation.name}' was already deleted from server`)\n            setObservations(observations.filter(p=>p.id !== toBeDeletedObservation.id))\n\n            setTimeout(()=>{\n              setErrorMessage(null)\n            }, 5000)\n\n          })\n    }\n\n\n        }}>\n       Delete\n      </span>\n    ),\n  },\n    ],\n    [observations]\n  );\n\n  const data = React.useMemo(() => observations, [observations]);\n\n  return (\n    <div class=\"main-container\">\n      <Styles>\n        <p>\n          Clicking on the header sorts the column in ascending or decending\n          order !\n        </p>\n        <h1>Bird Observation Table</h1>\n        \n        <Notification errorMessage={errorMessage} successMessage={successMessage} />\n\n        <Table columns={columns} data={data} />\n        <div class=\"form-section\">\n          <h2>Add new observation</h2>\n          <form onSubmit={addObservation}>\n            Add Name<input value={newName} onChange={handleNameChange} />\n            Pick Rarity \n              <select value={newRarity} onChange={handleRarityChange}>\n                <option value=\"common\">Common</option>\n                <option value=\"rare\">Rare</option>\n                <option value=\"extremely rare\">Extremely Rare</option>\n              </select>\n            Add Notes <textarea rows=\"5\" cols=\"25\" value={newNotes} onChange={handleNotesChange}></textarea>\n            <br></br>\n            <button type=\"submit\">Add Observation</button>\n          </form>\n        </div>\n      </Styles>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}