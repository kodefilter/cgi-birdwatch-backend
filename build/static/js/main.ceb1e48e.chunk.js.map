{"version":3,"sources":["services/observations.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","then","response","data","newObject","post","Styles","styled","div","Table","columns","useTable","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","firstPageRows","slice","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","i","getRowProps","cells","cell","getCellProps","length","App","useState","observations","setObservations","newName","setNewName","newRarity","setNewRarity","newNotes","setNewNotes","useEffect","observationService","initialObservations","React","useMemo","Header","accessor","onSubmit","event","preventDefault","observationObject","name","rarity","notes","timestamp","Date","addedObservation","concat","catch","error","value","onChange","target","cols","type","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ceb1e48e.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = \"/observations\"\n\nconst getAll = () => {\n    const request =  axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)  \n}\n\n//deleting, editing and getting single observation \n//was not on the requirement but can be implemented very easily\n\nexport default { getAll, create }","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { useTable, useSortBy } from \"react-table\";\nimport observationService from \"./services/observations\";\n\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`;\n\nfunction Table({ columns, data }) {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable(\n    {\n      columns,\n      data\n    },\n    useSortBy\n  );\n\n  // We don't want to render all 2000 rows for this example, so cap\n  // it at 20 for this use case\n  const firstPageRows = rows.slice(0, 20);\n\n  return (\n    <>\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                // Add the sorting props to control sorting. For this example\n                // we can add them into the header props\n                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                  {column.render(\"Header\")}\n                  {/* Add a sort direction indicator */}\n                  <span>\n                    {column.isSorted\n                      ? column.isSortedDesc\n                        ? \" ðŸ”½\"\n                        : \" ðŸ”¼\"\n                      : \"\"}\n                  </span>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {firstPageRows.map((row, i) => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      <br />\n      <div>Showing the first 20 results of {rows.length} rows</div>\n    </>\n  );\n}\n\nconst App = () => {\n  const [observations, setObservations] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newRarity, setNewRarity] = useState(\"\");\n  const [newNotes, setNewNotes] = useState(\"\");\n\n  useEffect(() => {\n    observationService.getAll().then(initialObservations => {\n      setObservations(initialObservations);\n    });\n  }, []);\n\n  const addObservation = event => {\n    event.preventDefault();\n\n    const observationObject = {\n      name: newName,\n      rarity: newRarity,\n      notes: newNotes,\n      timestamp: new Date()\n    };\n\n    observationService\n      .create(observationObject)\n      .then(addedObservation => {\n        setObservations(observations.concat(addedObservation));\n        setNewName(\"\");\n        setNewRarity(\"\");\n        setNewNotes(\"\");\n      })\n      .catch(error => {\n        setNewName(\"\");\n        setNewRarity(\"\");\n        setNewNotes(\"\");\n      });\n\n    //need to implement error or success message\n  };\n\n  const handleNameChange = event => {\n    setNewName(event.target.value);\n  };\n\n  const handleRarityChange = event => {\n    setNewRarity(event.target.value);\n  };\n\n  const handleNotesChange = event => {\n    setNewNotes(event.target.value);\n  };\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: \"Name\",\n        accessor: \"name\"\n      },\n      {\n        Header: \"Rarity\",\n        accessor: \"rarity\"\n      },\n      {\n        Header: \"Notes\",\n        accessor: \"notes\"\n      },\n      {\n        Header: \"Date\",\n        accessor: \"timestamp\"\n      }\n    ],\n    []\n  );\n\n  const data = React.useMemo(() => observations, [observations]);\n\n  return (\n    <Styles>\n      <pre>\n        <code>\n          Clicking on the header sorts the column in\n          ascending or decending order !\n        </code>\n      </pre>\n      <h1>Bird Observation Table</h1>\n      <Table columns={columns} data={data} />\n      <h2>Add new observation</h2>\n      <form onSubmit={addObservation}>\n        <div>\n          <h3>Name</h3>\n          <input value={newName} onChange={handleNameChange} />\n        </div>\n\n        <div>\n          <h3>Rarity</h3>\n          <select name=\"rarity\" value={newRarity} onChange={handleRarityChange}>\n            <option value=\"common\">Common</option>\n            <option value=\"rare\">Rare</option>\n            <option value=\"extremely rare\">Extremely Rare</option>\n          </select>\n        </div>\n\n        <h3>Notes</h3>\n        <textarea\n          rows=\"5\"\n          cols=\"25\"\n          value={newNotes}\n          onChange={handleNotesChange}\n        ></textarea>\n\n        <div>\n        <button type=\"submit\">Add</button>\n        </div>\n      </form>\n    </Styles>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}